package com.arematics.minecraft.core.bukkit;

import com.arematics.minecraft.core.listener.Quitable;
import com.arematics.minecraft.core.server.ArematicsComponent;
import com.arematics.minecraft.core.server.Server;
import com.arematics.minecraft.core.utils.ArematicsExecutor;
import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

@Component
public class TabExploitFixer extends ArematicsComponent implements Quitable {
    private static final String kickMessage =
            "§8<==================== §cSoulPvP §8====================>\n" +
                    "§cYour client is behaving very strangely. Please refrain from doing so.\n" +
                    "§8<=======================================================>";
    private static final String teamMessage = "§6CustomPayload§8§l |§5Player %d§n%name%§5 has shown a §lvery§5 strange " +
            "behavior! Possibly wanted to crash the server! §6Reason: §o%reason% §eEventually watch and / or ban!";

    public static HashMap<Player, Integer> packets_sent = new HashMap<>();

    @Autowired
    public TabExploitFixer(Server server){
        super(server);
    }

    @Override
    public void load(){
        for(Player p : Bukkit.getOnlinePlayers()) packets_sent.put(p, 0);

        ArematicsExecutor.syncRepeat(() -> {
            for(Player p : packets_sent.keySet().toArray(new Player[]{}))
                packets_sent.put(p, 0);
        }, 1, 1, TimeUnit.SECONDS);

        ProtocolLibrary.getProtocolManager().addPacketListener(new PacketAdapter(plugin, PacketType.Play.Client.TAB_COMPLETE) {

            @Override
            public void onPacketReceiving(PacketEvent event) {

                if(event.getPacket().getStrings().read(0).equals("/"))
                    count(event.getPlayer(), 3000);

            }

        });
    }

    public void count(Player p, int threshold){
        if(!packets_sent.containsKey(p)) return;
        int c = packets_sent.get(p);
        packets_sent.put(p, ++c);

        if(c > threshold){
            String message = teamMessage.replace("%name%", p.getName()).replace("%reason%",
                    "Tab Exploit");
            ArematicsExecutor.syncRun(() -> p.kickPlayer(kickMessage));
            server.getOnlineTeam().stream()
                    .filter(result -> result.hasPermission("team.crashmessages"))
                    .forEach(result -> result.info(message).handle());
            plugin.getLogger()
                    .warning(p.getName() + " tried to exploit: Tab Exploit");
        }
    }

    @Override
    public void quit(Player player) {
        packets_sent.remove(player);
    }
}
