package com.arematics.minecraft.core.bukkit;

import com.arematics.minecraft.core.Boots;
import com.arematics.minecraft.core.CoreBoot;
import com.arematics.minecraft.core.server.ArematicsComponent;
import com.arematics.minecraft.core.server.Server;
import com.comphenix.packetwrapper.WrapperPlayClientChat;
import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.ProtocolManager;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketContainer;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.entity.Player;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;

@Component
public class WorldEditExploitFixer extends ArematicsComponent {

    private static final Set<String> WORLD_EDIT_COMMANDS = new HashSet<>(Arrays.asList(
            "!", ",", ".s", "/", "/1", "/2", "/anvil", "/c", "/calc",
            "/calculate", "/cancel", "/caves", "/center", "/chunk", "/clearclipboard", "/clearhistory", "/clipboard",
            "/confirm", "/contract", "/copy", "/count", "/curve", "/cut", "/cyl", "/deform", "/desel", "/deselect",
            "/distr", "/drain", "/drawsel", "/eval", "/evaluate", "/ex", "/expand", "/ext", "/extinguish", "/faces",
            "/fall", "/fast", "/fawerestore", "/fawerollback", "/fill", "/fillr", "/fixlava", "/fixlighting",
            "/fixwater", "/flip", "/flora", "/forest", "/frb", "/frestore", "/g", "/gb", "/gen", "/genbiome",
            "/generate", "/generatebiome", "/getlighting", "/globalmask", "/globalsourcemask", "/gmask", "/green",
            "/gsmask", "/gtexture", "/gtransform", "/hcyl", "/heightmapinterface", "/help", "/hollow", "/hpos1",
            "/hpos2", "/hpyramid", "/hsphere", "/image", "/img", "/info", "/inset", "/l", "/lay", "/lazycopy",
            "/lazycut", "/line", "/listbrush", "/lrbuild", "/mask", "/middle", "/move", "/naturalize", "/nbt",
            "/nbtinfo", "/none", "/ore", "/ores", "/outline", "/outset", "/overlay", "/paste", "/place", "/pos1",
            "/pos2", "/pyramid", "/re", "/redo", "/regen", "/removeabove", "/removebelow", "/removelight", "/to",
            "/targetoffset", "/removelighting", "/removenear", "/rep", "/replace", "/replacenear", "/restore",
            "/rollback", "/rotate", "/s", "/schem", "/schematic", "/search", "/searchitem", "/sel", "/select",
            "/set", "/setbiome", "/setblocklight", "/setlight", "/setskylight", "/shift", "/size", "/smask",
            "/smooth", "/snow", "/solve", "/sourcemask", "/sphere", "/spline", "/stack", "/thaw", "/timeout",
            "/tips", "/toggleplace", "/undo", "/w", "/walls", "/wand", "/wea", "/weanywhere", "/wer",
            "/worldeditanywhere", "/worldeditregion", ";", "asc", "ascend", "asset", "biomeinfo", "biomelist",
            "biomels", "br", "brush", "butcher", "ceil", "cfi", "chunkinfo", "clearclipboard", "clearhistory",
            "clipboard", "createasset", "createfromimage", "cs", "cycler", "delchunks", "deltree", "desc",
            "descend", "download", "ex", "ext", "extinguish", "farwand", "fawe", "fawerollback", "fcancel",
            "fixlava", "fixwater", "flood", "floodfill", "forestgen", "frb", "globalmask", "globalsourcemask",
            "gmask", "green", "gsmask", "gtexture", "gtransform", "info", "inspect", "j", "jumpto", "listchunks",
            "load", "loadbrush", "lrbuild", "makeasset", "mask", "masks", "mat", "material", "none", "patterns",
            "pickaxe", "posa", "posb", "primary", "pumpkins", "range", "redo", "rem", "rement", "remove",
            "removeabove", "removebelow", "removenear", "repl", "replacenear", "restore", "save",
            "savebrush", "schem", "schematic", "scroll", "secondary", "select", "setupdispatcher", "snow",
            "size", "smask", "snap", "snapshot", "sourcemask", "sp", "superpickaxe", "tar", "target",
            "targetmask", "targetoffset", "tarmask", "thaw", "thru", "tips", "tm", "to", "toggleeditwand",
            "toggleplace", "tool", "transform", "transforms", "tree", "undo", "unstuck", "vis", "visual",
            "visualize", "we", "wea", "wer", "worldedit", "worldeditanywhere", "worldeditregion"
    ));

    @Autowired
    public WorldEditExploitFixer(Server server) {
        super(server);
    }

    @Override
    public void load() {
        registerTabPacketListener();
    }

    private void registerTabPacketListener() {
        ProtocolManager protocolManager = ProtocolLibrary.getProtocolManager();

        protocolManager.addPacketListener(new PacketAdapter(Boots.getBoot(CoreBoot.class),
                ListenerPriority.NORMAL, PacketType.Play.Client.CHAT) {

            @Override
            public void onPacketReceiving(PacketEvent event) {
                if (event.isCancelled()) return;

                Player player = event.getPlayer();
                PacketContainer packetContainer = event.getPacket();
                WrapperPlayClientChat packet = new WrapperPlayClientChat(packetContainer);
                String command = packet.getMessage().toLowerCase();

                // So it will only be checked if it's really a command and wont
                // deny players to write ',/' bc it's a 'command'
                if (!command.startsWith("/")) return;

                if (command.contains(" ")) {
                    command = command.split(Pattern.quote(" "))[0];
                }

                if (WORLD_EDIT_COMMANDS.contains(command.substring(1)) && !player.isOp())
                    event.setCancelled(true);
            }

        });
    }
}
